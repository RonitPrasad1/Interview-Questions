#include <iostream>
#include <array>
#include <vector>
#include <string>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <utility>
#include <map>

static int i;

template <typename T>
T GetTreeErrors (T InputType, std::map <T, std::vector<T>>& List, std::map<T, T>& Parents)
{
    char parent;
    int index = 0;
    bool Error = false;
    
    //StringSize = InputType.length();
    for (int i = 0; i < InputType.size(); ++i)
    {
        if (InputType[i] != '(' && InputType[i] != ')' && InputType[i] != ',')
        {
            ++index;
            if (index % 2 == 1)
            {
                //E1: Invalid Input
                if (i - 1 >= 0 && InputType[i - 1] != '(')
                {
                    std::cout << "E1" << '\n';
                    return false;
                }
                parent = InputType[i];
            }
        }
    }
    
    int ListSize = List[parent].size();
    
    //E2: If that pair is found anywhere else/individual value
    for (int j = 0; j < ListSize; ++j)
    {
        if (List[parent][j] == InputType[i])
        {
            std::cout << "E2" << '\n';
            return false;
        }
    }
    
    //E3: Parent has more than two children
    if (ListSize == 2)
    {
        std::cout << "E3" << '\n';
        return false;
    }

    /*
    E4: I completely have no idea for that.
    */
    
    Parents[InputType[i]]++;
    if (Parents[InputType[i]] == 2)
    {
        Error = true; //bool declared turns true
    }
    
    //E5:
    if (Error == true)
    {
        std::cout << "E5" << '\n';
        return false;
    }
    return true;
}